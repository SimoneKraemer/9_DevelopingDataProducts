y = data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE, alternative = "greater")
t.test(x = data[(data$supp == "OJ" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE, alternative = "greater")
t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE, alternative = "greater")
t.test(x = data[(data$supp == "OJ" & data$dose == 0.5), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)
t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 2.0), ]$len,
paired = FALSE, var.equal = TRUE)
animalsPerGroup <- aggregate(data$len, by = list(data$supp, data$dose), FUN = length)
animalsPerGroup
animalsPerGroup <- reshape(data = animalsPerGroup, idvar = "Group.1",
timevar = "Group.2", direction = "wide")
animalsPerGroup
colnames(animalsPerGroup) <- c("supp", "0.5 mg/day", "1.0 mg/day", "2.0 mg/day")
animalsPerGroup
tableMean
confIntOJ
t.test(x = data[(data$supp == "VC" & data$dose == 0.5), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)
confInt <- rbind(
cbind("VC", "1.0 - 0.5",
t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("VC", "2.0 - 1.0",
t.test(x = data[(data$supp == "VC" & data$dose == 2.0), ]$len -
data[(data$supp == "VC" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("OJ", "1.0 - 0.5",
t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("OJ", "2.0 - 1.0",
t.test(x = data[(data$supp == "OJ" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf)
)
confInt
confIntOJ
confInt <- rbind(
cbind("VC", "1.0 - 0.5"),
t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf,
cbind("VC", "2.0 - 1.0",
t.test(x = data[(data$supp == "VC" & data$dose == 2.0), ]$len -
data[(data$supp == "VC" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("OJ", "1.0 - 0.5",
t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("OJ", "2.0 - 1.0",
t.test(x = data[(data$supp == "OJ" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf)
)
t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf
confInt <- rbind(
cbind("VC", "1.0 - 0.5",
t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("VC", "2.0 - 1.0",
t.test(x = data[(data$supp == "VC" & data$dose == 2.0), ]$len -
data[(data$supp == "VC" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("OJ", "1.0 - 0.5",
t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
cbind("OJ", "2.0 - 1.0",
t.test(x = data[(data$supp == "OJ" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf)
)
confInt
confInt <- data.frame(confInt)
confInt
test <- t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf
test
test <- c(test)
test
test
confInt <- rbind(
cbind("VC", "1.0 - 0.5",
c(t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf)),
cbind("VC", "2.0 - 1.0",
c(t.test(x = data[(data$supp == "VC" & data$dose == 2.0), ]$len -
data[(data$supp == "VC" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf)),
cbind("OJ", "1.0 - 0.5",
c(t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf)),
cbind("OJ", "2.0 - 1.0",
c(t.test(x = data[(data$supp == "OJ" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf))
)
confInt <- data.frame(confInt)
confInt
c(t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf)
cbind("VC", "1.0 - 0.5",
c(t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf))
confInt <- data.frame(confInt)
confInt <- reshape(data = confInt, idvar = c(confInt[,1], confInt[,2]),
timevar = confInt[,3], direction = "wide")
confInt[,1]
confInt[,3]
confInt[,2]
confInt
confInt <- rbind(
c("VC", "1.0 - 0.5",
t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "VC" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
c("VC", "2.0 - 1.0",
t.test(x = data[(data$supp == "VC" & data$dose == 2.0), ]$len -
data[(data$supp == "VC" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
c("OJ", "1.0 - 0.5",
t.test(x = data[(data$supp == "OJ" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
c("OJ", "2.0 - 1.0",
t.test(x = data[(data$supp == "OJ" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf)
)
confInt
confInt <- data.frame(confInt)
confInt
colnames(confInt) <- c("supp", "diffDose", "Lower", "Upper")
confInt
confInt <- rbind(
c("VC-OJ", "0.5",
t.test(x = data[(data$supp == "VC" & data$dose == 0.5), ]$len -
data[(data$supp == "OJ" & data$dose == 0.5), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
c("VC-OJ", "1.0",
t.test(x = data[(data$supp == "VC" & data$dose == 1.0), ]$len -
data[(data$supp == "OJ" & data$dose == 1.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf),
c("VC-OJ", "2.0",
t.test(x = data[(data$supp == "VC" & data$dose == 2.0), ]$len -
data[(data$supp == "OJ" & data$dose == 2.0), ]$len,
paired = FALSE, var.equal = TRUE)$conf)
)
confInt <- data.frame(confInt)
colnames(confInt) <- c("supp", "dose", "Lower", "Upper")
confInt
confInt
confInt$Lower
require(knitr)
require(markdown)
library(UsingR)
library(ggplot2)
dataCars <- mtcars
catVar <- c('vs', 'am')
dataCars[, catVar] <- lapply(dataCars[, catVar] , factor)
manova(lm(mpg ~ . , data = dataCars))
?manova
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
require(knitr)
require(markdown)
library(UsingR)
library(ggplot2)
dataCars <- mtcars
# Convert categorical data to factor variables
catVar <- c('vs', 'am')
dataCars[, catVar] <- lapply(dataCars[, catVar] , factor)
sigTable <- anova(lm(mpg ~ . , data = dataCarsRed))
sigTable <- anova(lm(mpg ~ . , data = dataCars))
sigTable
pairs(subset(dataCars, select = -c(mpg)))
plot(dataCars$cyl, dataCars$disp)
plot(dataCars$cyl, dataCars$disp/dataCars$cyl)
sigTable <- anova(lm(mpg ~ cyl + wt + disp + am , data = dataCars))
sigTable
summary(lm(mpg ~ cyl + wt + disp + am , data = dataCars))
summary(lm(mpg ~ cyl + wt + disp + am -1 , data = dataCars))
predict(lm(mpg ~ cyl + wt + disp + am -1 , data = dataCars))
predict(lm(mpg ~ cyl + wt + disp + am -1 , data = dataCars)) - dataCars$mpg
plot(predict(lm(mpg ~ cyl + wt + disp + am -1 , data = dataCars)), predict(lm(mpg ~ cyl + wt + disp + am -1 , data = dataCars)) - dataCars$mpg)
dataMT <- dataCars[dataCars$am == 1]
dataMT <- dataCars[, dataCars$am == 1]
dataMT <- dataCars[ ,dataCars$am == 1]
dataCars$am == 1
dataMT <- dataCars[dataCars$am == 1, ]
dataAT <- dataCars[dataCars$am == 0, ]
dataMT <- subset(dataMT, select = -c('am'))
dataMT <- subset(dataMT, select = -c(dataMT$am))
head(dataMT)
dataMTt
dataMT
dataAT
dataMT <- dataCars[dataCars$am == 1, ]
dataMT <- subset(dataMT, select = -c('am'))
dataMT <- subset(dataMT, select = -c(am))
head(dataMT)
dataAT <- subset(dataAT, select = -c(am))
fitAT <- lm(mpg ~ ., data = dataAT)
fitMT <- lm(mpg ~ ., data = dataMT)
summary(fitAT)
summary(fitMT)
anova(fitAT)
anova(fitMT)
dataCars$disp/dataCars$carb
dataCars$hp/dataCars$wt
dataCars$hp/dataCars$disp
plot(dataCars$hp/dataCars$disp)
plot(dataCars$disp,dataCars$hp/dataCars$disp)
lm(dataCars$hp/dataCars$disp ~ dataCars$disp)
summary(lm(dataCars$hp/dataCars$disp ~ dataCars$disp))
pairs(dataCars)
plot(dataCars$disp,dataCars$hp/dataCars$disp)
plot(dataCars$cyl,dataCars$disp/dataCars$cyl)
pairs(dataCars)
fitTest <- lm(dataCars$disp/dataCars$cyl ~ dataCars$cyl)
residTest <- resid(lm(dataCars$disp/dataCars$cyl ~ dataCars$cyl))
plot(predict(fitTest), residTest)
plot(dataCars$disp/dataCars$cyl)
plot(predict(fitTest), residTest)
summary(fitTest)
dataCars$disp/dataCars$cyl
fitTest <- lm(dataCars$disp/dataCars$cyl ~ dataCars$cyl^2)
summary(fitTest)
fitTest <- lm(dataCars$disp/dataCars$cyl ~ dataCars$cyl^2 + dataCars$cyl)
summary(fitTest)
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg))
g <- g + boxplot()
g
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg))
g <- g + geom_boxplot()
g
?mtcars
dataCars$am <- factor(dataCars$am, levels = 'automatic', 'manual')
dataCars
dataCars$am <- factor(dataCars$am, labels = c('Automatic', 'Manual'))
dataCars$am <- factor(dataCars$am, labels = c('Automatic', 'Manual'))
dataCars <- mtcars
# Convert categorical data to factor variables
dataCars$am <- factor(dataCars$am, labels = c('Automatic', 'Manual'))
dataCars
dataCars$vs <- factor(dataCars$vs, labels = c('VShape', 'Straight'))
head(dataCars)
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg), col = aes)
g <- g + geom_boxplot()
g
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg), color = dataCars$am)
g <- g + geom_boxplot() + + xlab("Transmission Type") + ylab("Miles per gallon")
g
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg), color = dataCars$am)
g <- g + geom_boxplot() + xlab("Transmission Type") + ylab("Miles per gallon")
g
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg, color = dataCars$am))
g <- g + geom_boxplot() + xlab("Transmission Type") + ylab("Miles per gallon")
g
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg, fill = dataCars$am))
g <- g + geom_boxplot() + xlab("Transmission Type") + ylab("Miles per gallon")
g
g <- ggplot(data = dataCars, aes(dataCars$am, dataCars$mpg, fill = dataCars$am))
g <- g +
geom_boxplot() +
xlab("Transmission Type") +
ylab("Miles per gallon") +
theme(legend.position="none")
g
summary(lm(mpg ~ am, data = dataCars))
summary(lm(mpg ~ am - 1, data = dataCars))
?step
lowestModel <- fitTransType
highestModel <- lm(mpg ~ ., data = dataCars)
step(highestModel, scope=list(lower=lowestModel, upper=highestModel),
direction="backward")
fitTransType <- lm(mpg ~ am, data = dataCars)
summary(fitTransType)
lowestModel <- fitTransType
highestModel <- lm(mpg ~ ., data = dataCars)
step(highestModel, scope=list(lower=lowestModel, upper=highestModel),
direction="backward")
lowestModel <- fitTransType
highestModel <- lm(mpg ~ ., data = dataCars)
step(lowestModel, scope=list(lower=lowestModel, upper=highestModel),
direction="forward")
lowestModel <- fitTransType
highestModel <- lm(mpg ~ ., data = dataCars)
step(lowestModel, scope=list(lower=lowestModel, upper=highestModel),
direction="both")
pairs(dataCars)
sigTable <- anova(lm(mpg ~ . , data = dataCars))
sigTable
fitModel1 <- lm(mpg ~ am + cyl + disp + wt, data = dataCars)
summary(fitModel1)
fitModel2 <- lm(mpg ~ am + cyl + disp + hp + drat + wt + carbon, data = dataCars)
summary(fitModel2)
fitModel2 <- lm(mpg ~ am + cyl + disp + hp + drat + wt + carbon, data = dataCars)
fitModel2 <- lm(mpg ~ am + cyl + disp + hp + drat + wt + carb, data = dataCars)
summary(fitModel2)
fitModel3 <- lm(mpg ~ am + cyl + wt, data = dataCars)
summary(fitModel3)
sigTable
fitModel1
summary(fitModel1)
fitModel2 <- lm(mpg ~ am + cyl + wt, data = dataCars)
summary(fitModel2)
result <- anova(fitTransType, fitModel2, fitModel2)
result
fitModel1 <- lm(mpg ~ am + cyl + disp + wt, data = dataCars)
summary(fitModel1)
fitModel2 <- lm(mpg ~ am + cyl + wt, data = dataCars)
summary(fitModel2)
result <- anova(fitTransType, fitModel2, fitModel2)
result
result <- anova(fitTransType, fitModel1, fitModel2)
result
result <- anova(fitTransType, fitModel2, fitModel1)
result <- anova(fitTransType, fitModel2, fitModel1)
result
coefModel1 <- summary(fitModel1)$coef
# Model 1:
fitModel1 <- lm(mpg ~ am, data = dataCars)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
require(knitr)
require(markdown)
library(UsingR)
library(ggplot2)
dataCars <- mtcars
# Convert categorical data to factor variables
dataCars$am <- factor(dataCars$am, labels = c('Automatic', 'Manual'))
dataCars$vs <- factor(dataCars$vs, labels = c('VShape', 'Straight'))
# Model 1:
fitModel1 <- lm(mpg ~ am, data = dataCars)
coefModel1 <- summary(fitModel1)$coef
coefModel1
fitModel1
test <- summary(fitModel1)
test
test[11]
test[10]
test[9]
test[9][1]
test[9][2]
test[9]
class(test[9])
bla <- test[9]
bla
bla[0]
bla[1]
bla.value
test$adj.r.squared
sigTable <- anova(lm(mpg ~ . , data = dataCars))
kable(sigTable, digits = 5, align = "r")
result <- anova(fitModel1, fitModel2, fitModel3)
# Model 2:
fitModel2 <- lm(mpg ~ am + cyl + disp + wt, data = dataCars)
coefModel2 <- summary(fitModel2)$coef
kable(coefModel2, digits = 4, align = "r")
# Model 3:
fitModel3 <- lm(mpg ~ am + cyl + wt, data = dataCars)
coefModel3 <- summary(fitModel3)$coef
kable(coefModel3, digits = 4, align = "r")
result <- anova(fitModel1, fitModel2, fitModel3)
kable(result, digits = 4, align = "r")
result <- anova(fitModel1, fitModel3, fitModel2)
kable(result, digits = 4, align = "r")
result <- anova(fitModel1, fitModel3, fitModel2)
kable(result, align = "r")
result <- anova(fitModel1, fitModel2, fitModel3)
kable(result, align = "r")
result <- anova(fitModel1, fitModel3, fitModel2)
kable(result, align = "r")
result <- anova(fitModel1, fitModel3, fitModel2)
result <- anova(fitModel1, fitModel3, fitModel2)
result <- anova(fitModel1, fitModel3, fitModel2)
result
result <- anova(fitModel1, fitModel2, fitModel3)
result
result <- anova(fitModel1, fitModel3, fitModel2)
result
# Model 2:
fitModel2 <- lm(mpg ~ am + cyl + disp + wt -1, data = dataCars)
coefModel2 <- summary(fitModel2)$coef
kable(coefModel2, digits = 4, align = "r")
# Model 2:
fitModel2 <- lm(mpg ~ am + cyl + disp + wt, data = dataCars)
coefModel2 <- summary(fitModel2)$coef
kable(coefModel2, digits = 4, align = "r")
coefModel3
coefModel3[2,1]
coefModel1[2,1]
coefModel1
install.packages(caret)
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(caret)
version
update.packages(checkBuilt=TRUE)
update.packages()
y
y
install.packages("pgmm")
install.packages("rattle")
library(rattle)
library(rattle)
data(segmentationOriginal)
# Generate train and test dataset
trainData <- segmentationOriginal[segmentationOriginal$Case == "Train", ]
testData <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
# Fit the model
set.seed(125)
modFit <- rpart(Class ~ ., data = trainData)
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(rpart)
# Question 1:
library(rattle)
data(segmentationOriginal)
# Generate train and test dataset
trainData <- segmentationOriginal[segmentationOriginal$Case == "Train", ]
testData <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
# Fit the model
set.seed(125)
modFit <- rpart(Class ~ ., data = trainData)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
library(caret)
install.packages("caret")
install.packages("rpart")
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(rpart)
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(rpart)
# Question 1:
library(rattle)
data(segmentationOriginal)
data(segmentationOriginal)
library(caret)
install.packages("ggplot2")
library(caret)
library(caret)
install.packages("caret")
library(caret)
library(ggplot2)
install.packages("Rcpp")
library(ggplot2)
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(rpart)
library(rattle)
data(segmentationOriginal)
trainData <- segmentationOriginal[segmentationOriginal$Case == "Train", ]
testData <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
# Fit the model
set.seed(125)
modFit <- rpart(Class ~ ., data = trainData)
fancyRpartPlot(modFit$finalModel)
str(tainData)
trainData <- segmentationOriginal[segmentationOriginal$Case == "Train", ]
testData <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
str(trainData)
modFit <- rpart(Class ~ ., data = trainData)
modFit
modFit <- train(Class ~ ., data = trainData, method = 'rpart')
fancyRpartPlot(modFit$finalModel)
setwd("D:/Coursera/DataScience/Course9/Repo/Week4_Shiny")
library(caret)
set.seed(2602)
inTrain <- createDataPartition(y = iris$Species, p = 0.8, list = FALSE)
trainData <- iris[inTrain, ]
testData <- iris[-inTrain, ]
modFit <- train(Species ~ ., data = trainData, method = 'rf',
trControl = trainControl(method = "cv",
number = 2))
modPred <- predict(modFit, newdata = testData)
confMat <- confusionMatrix(modPred, testData$Species)
confMat$overall
confMat$table
confMat$positive7
confMat$positive
confMat$overall
confMat
publish(user = "SimoneKraemer", repo = "9_DevelopingDataProducts/Week4_Shiny", host = 'github')
